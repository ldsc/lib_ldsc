/*
=========================================================================
PROJETO:          Biblioteca LIB_LMPT
                  Ramo: TPadrao_ramo
=========================================================================

Desenvolvido por:	Laboratorio de Meios Porosos
									e Propriedades Termofisicas	[LMPT].
@author:          André Duarte Bueno
File:             TBaseMatriz.cpp
begin:            Sat Sep 16 2000
copyright:        (C) 2000 by André Duarte Bueno
email:            andre@lmpt.ufsc.br
*/

//-----------------------------------------------------------------------
//Bibliotecas C/C++
//-----------------------------------------------------------------------
#include <iostream>    	
#include <fstream>
#include <algorithm>
using namespace std;

//-----------------------------------------------------------------------
//Bibliotecas LIB_LMPT
//-----------------------------------------------------------------------
#include <TMatriz/TBaseMatriz.h>

//-----------------------------------------------------------------------
//Atributo estatico da classe
//-----------------------------------------------------------------------
//Largura do campo de salvamento dos dados em disco (2)
int TBaseMatriz::larguraCampo = 2;

/**	Armazena matriz em disco, recebe o nome do arquivo de		disco.
        No arquivo header detalhes dos formatos de salvamento em disco.
@author :André Duarte Bueno
@see    :
@param  :
@return :
*/
bool TBaseMatriz::Write(string fileName,int separado) const
{
//try
//	{                               ////////////////////////
                                    //Abre arquivo disco
 ofstream fout;
 if(formatoSalvamento > 3)					//Se maior que 3 tem formato de salvamento binario
	fout.open(fileName.c_str(),ios::binary);	//Abre arquivo de disco  formato Binario
 else                               //Senão
	fout.open(fileName.c_str());     	//Abre arquivo de disco  formato ASCII

 if(fout.good())										//Testa abertura do arquivo
  {
  fout.width(larguraCampo);         //Define a largura do campo
	fout.setf(ios::left);fout.fill(' ');

                                    ////////////////////////
                                    //Salva cabecalho

																		//Se for só para salvar os dados pula o salvamento do cabecalho
   if( formatoSalvamento != WRITEFORM_ASCII_DATA && formatoSalvamento != WRITEFORM_BINARY_DATA )
      {
	    SalvaCabecalho(fout);					//(virtual)Salva dados do cabecalho:
																		//TVetor-> ("V1 \n nx") ou
																		//TMatriz2D->("P1 \n nx ny") ou
																		//TMatriz3D->("D1 \n nx ny nz")

      if ( formatoSalvamento == WRITEFORM_ASCII_PI_N_256_DATA || formatoSalvamento == WRITEFORM_BINARY_PI_N_256_DATA)
				fout<<" "<<256<<'\n';
			else if(formatoSalvamento == WRITEFORM_ASCII_PI_N_MAXCOLOR_DATA || formatoSalvamento == WRITEFORM_BINARY_PI_N_MAXCOLOR_DATA)
				fout<<" "<<65000<<'\n';
      else
        fout<<'\n';
      }

                                    ////////////////////////
																		//Salva os dados
	if(separado)
	   SalvaDados(fout);             	//(virtual) Salva dados com um espaco " " 1 0 0 1
	else
	   SalvaDadosColados(fout);      	//(virtual) Salva dados "colados" sem espaço 1001

  fout.close();
  return true;											//sucesso
 }
 else
  return false;
}

/*
============================================================================
Documentacao LeEfetivamenteCabecalho
============================================================================
As classes derivadas chamam esta funcao passando os parametros fin,nx,ny,nz.
1- Lê o formato
2- Lê nx,[ny],[nz]
3- ^Define o formatoSalvamento e [lê numeroCores]
*/
/*
void TBaseMatriz::LeEfetivamenteCabecalho(ifstream& fin, unsigned int& nx,unsigned int& ny,unsigned int& nz,unsigned int& numeroCores)
{
 if(fin!=NULL)
 {
																	   /////////////////////////////////
																	   //Lê o formato e define nx,ny,nz
	char formato[50];
	Desaloca();                    		 //(virtual)Precisa desalocar pois pode mudar nx,ny, desaloca faz nx=ny=0

	fin>>formato;                      //Obtem formato do arquivo

																	   //Primeiro verifica o caracter de formatacao
	if (formato[0] == 'V' || formato[0] == 'v' )       //é um vetor
	   {fin>>nx;}
	else if (formato[0] == 'P' || formato[0] == 'p' )  //é uma matriz 2D
      {fin>>nx;	fin>>ny;}
	else if (formato[0] == 'D' || formato[0] == 'd' )  //É uma matriz 3D
      {fin>>nx;	fin>>ny; fin>>nz;}
   else if (formato[0]>= 48 || formato[0] <=57 )		//Se for um número, então só são dados
		{                                               //deve receber nx,ny,nz como parametros.
      formatoSalvamento=WRITEFORM_ASCII_DATA;       //Preciso recolocar ponteiro de leitura no inicio do arquivo
		fin.seekg(0,ios::beg);               						//reposiciona inicio arquivo
      }
   else
      {
      formatoSalvamento=WRITEFORM_ERROR;
      nx=ny=nz=0;                                   //zera para evitar acesso a dados errados
      return;
      }
																	   								/////////////////////////////////
																	   								//Lê o formato de salvamento
	unsigned int  numeroCores;
   switch (formato[1])
	  {
      //Leitura ASCII
		case '1':       formatoSalvamento=WRITEFORM_ASCII_PI_N_DATA;
      					 break;
		case '2':       formatoSalvamento=WRITEFORM_ASCII_PI_N_256_DATA;
      					 fin>>numeroCores;
                      break;
		case '3':       formatoSalvamento=WRITEFORM_ASCII_PI_N_MAXCOLOR_DATA;
      					 fin>>numeroCores; 									//exceto uchar
      					 break;
      //Leitura Binaria
		case '4':       formatoSalvamento=WRITEFORM_BINARY_PI_N_DATA;
                      break;
		case '5':       formatoSalvamento=WRITEFORM_BINARY_PI_N_256_DATA;
                      fin>>numeroCores;
                      break;
		case '6':       formatoSalvamento=WRITEFORM_BINARY_PI_N_MAXCOLOR_DATA;
      					 fin>>numeroCores;                //exceto uchar
                      break;
		default:        //='2'
					       formatoSalvamento=WRITEFORM_ASCII_PI_N_256_DATA;
      					 fin>>numeroCores;
                      break;
	  }
 }
}
*/
/*
============================================================================
Documentacao Read
============================================================================
Descrição:        Le dados da matriz do disco,
						Primeiro lê o cabeçalho, depois aloca a matriz,
                  e finalmente lê os dados  armazenados no disco.
Pré-condições:
Excessões:        Tipos de excessoes
Concorrência:
Tempo processamento(s):
Tamanho(bits):
Comentarios:

Programador:      Andre Duarte Bueno
*/
//bool Read (const char*& fileName,bool separado=1); //Le matriz do disco
//bool TBaseMatriz::Read(const char*& fileName,bool separado=1); //Le matriz do disco
/*
bool TBaseMatriz::Read(const char*& fileName,bool separado)
{
  																					///////////////////////////////////
                                            //Abertura do arquivo de disco
  ifstream fin;                             ///////////////////////////////////
                                            //->Verifica o formato do arquivo
  fin.open(fileName);   					   				//Abre arquivo como sendo ASCII

  string aux(50);
  if(fin.good());                           //Se abriu corretamente o arquivo
	  {
      fin>>aux;                          		//Lê a primeira string ( Pi ou Di ou Vi ou um numero. ->P1,P2,...D1,D5..)
                                            //Se nao for um formato conhecido, sai

     //if(	aux[0]!='V' && aux[0]!='v' &&   //Se nao é um vetor
     // 		aux[0]!='P' && aux[0]!='p' &&   //Se nao é uma matriz 2D
     //       aux[0]!='D' && aux[0]!='d' )//&& //Se nao é uma matriz 3D
            //formatoSalvamento != WRITEFORM_ASCII_DATA && //e se nao sao somente dados
            //formatoSalvamento!=WRITEFORM_BINARY_DATA)
          // return 0;                      //entao sai

	  //Aqui verifica a correcao, um vetor lendo um vetor, uma matriz2D lendo uma matriz2D,..
	  if((GetDimensaoMatriz()==1 && aux[0]!='V') return 0; if (GetDimensaoMatriz()==1 && aux[0]!='v')) return 0;
	  if((GetDimensaoMatriz()==2 && aux[0]!='P') return 0; if (GetDimensaoMatriz()==2 && aux[0]!='p')) return 0;
	  if((GetDimensaoMatriz()==3 && aux[0]!='D') return 0; if (GetDimensaoMatriz()==3 && aux[0]!='d')) return 0;

                                            //se for um V ou P ou D, verifica o segundo índice
     	if (aux[1] != '0' && aux[1] != '1' && aux[1] != '2' && aux[1] != '3')
		  {                                     //se i!= 1 e !=2 e !=3, abriu com o formato errado
	     fin.close();                         //Fecha o arquivo e
		  fin.open(fileName,ios::binary);				//Reabre como binario
	     }
		else                                    //Abriu com o formato correto
        //verificar ifstream                //Reposiciona ponteiro arquivo, no inicio do arquivo
        fin.seekg(0,ios::beg);              //vai para posicao 0, a partir do inicio do arquivo
     }
                                            //////////////////////////////////
                                            //Leitura do cabecalho de dados
  LeCabecalho(fin);		 				         			//(virtual)Chama LeEfetivamenteCabecalho(fin,nx,ny,nz,ncores)



  if(fin.good())                             //Se o arquivo esta ok
   {
	Aloca();                  							  //(virtual) Aloca a matriz (usa nx,ny,nz lidos do arquivo de disco)
                                            ////////////////////////////////////
                                            //Leitura dos dados da matriz
   if(separado)
	   LeDados(fin);                          //(virtual) Lê os dados 12 15 21 20 2 5
   else
      LeDadosColados(fin);                  //(virtual) Lê os dados colados 0011010101

   return true;															//sucesso

   }
  else
	return 0; 																//falhou
}
*/
/*
	  //Aqui verifica a correcao, um vetor lendo um vetor,
	  if((aux[0]!='V' && aux[0]!='v')
     		return 0;
*/

/*
-------------------------------------------------------------------------
Função:   AbreArquivo
-------------------------------------------------------------------------
@short  :
Esta função abre o arquivo de disco, como sendo normal(ASCII), verifica a primeira string
se ok posiciona ponteiro get no inicio do arquivo.
Se o arquivo foi aberto como ASCII e o formato correto é o binário,
reabre o arquivo como binario
@author :André Duarte Bueno
@see    :
@param  :
@return :
*/

bool TBaseMatriz::AbreArquivo(ifstream& fin,string fileName)
{															
  fin.open(fileName.c_str());			   	//Abre arquivo formato correto

  //char aux[50];
	string aux;
  if(fin.good())                      //Se abriu corretamente o arquivo
	  {
      fin>>aux;                       //Lê a primeira string ( Pi ou Di ou Vi ou um numero. ->P1,P2,...D1,D5..)


                                      //Se abriu com o formato errado
    //if (aux[1] != '0' && aux[1] != '1' && aux[1] != '2' && aux[1] != '3')
     	if (aux.at(1) != '0' && aux.at(1) != '1' && aux.at(1) != '2' && aux.at(1) != '3')
		  {                               //se i!= 1 e !=2 e !=3, abriu com o formato errado
	    fin.close();                    //Fecha o arquivo e
		  fin.open(fileName.c_str()	,ios::binary);	//Reabre como binario
        if(fin.good())
		     	return 1;
        else
          return 0;
	    }
		else                              //Se abriu com o formato correto
        {
        fin.seekg(0,ios::beg);        //vai para posicao 0, a partir do inicio do arquivo
        return 1;
        }
     }
 return 0;                            //nao abriu corretamente retorna erro
}

/*
-------------------------------------------------------------------------
Função:     VerificaFormato
-------------------------------------------------------------------------
@short  :VerificaFormatoSalvamento
@author :André Duarte Bueno
@see    :
@param  :
@return :

*/
int TBaseMatriz::VerificaFormato(ifstream& fin)
{
                                            ///////////////////////////////////
                                            //Verifica o formato
                                            ///////////////////////////////////
unsigned int formatoSalvamento;//??já existe na classe esta variável, porque cria novamente??
if(fin.good())                              //Se abriu corretamente o arquivo
 {
  char aux[50];                             //
  fin>>aux;                          				//Lê a primeira string ( Pi ou Di ou Vi ou um numero. ->P1,P2,...D1,D5..)

//0123456789
  /*if (aux[0]>= 48 && aux[0] <=57 )				//Se for um número, então só são dados
	   {                                      //deve receber nx,ny,nz como parametros.
      formatoSalvamento=WRITEFORM_ASCII_DATA;//Preciso recolocar ponteiro de leitura no inicio do arquivo
	   fin.seekg(0,ios::beg);               	//reposiciona inicio arquivo
      return formatoSalvamento;
      }
  else */                                   //retorna o formato de salvamento
	switch (aux[1])
	  {
		case '1':       return formatoSalvamento = WRITEFORM_ASCII_PI_N_DATA;
		case '2':       return formatoSalvamento = WRITEFORM_ASCII_PI_N_256_DATA;
		case '3':       return formatoSalvamento = WRITEFORM_ASCII_PI_N_MAXCOLOR_DATA;
		case '4':       return formatoSalvamento = WRITEFORM_BINARY_PI_N_DATA;
		case '5':       return formatoSalvamento = WRITEFORM_BINARY_PI_N_256_DATA;
		case '6':       return formatoSalvamento = WRITEFORM_BINARY_PI_N_MAXCOLOR_DATA;
		default:        return formatoSalvamento = WRITEFORM_ASCII_PI_N_256_DATA;
	  }
 }
 else
       return formatoSalvamento = WRITEFORM_ERROR;
}

/*
-------------------------------------------------------------------------
Função: Propriedades
-------------------------------------------------------------------------
@short  :
@author :André Duarte Bueno
@see    :
@param  :
@return :
*/
void TBaseMatriz::Propriedades(ofstream& os)const
{
   os<<"\nPropriedades objeto :";
   os<<"\nDimensao da Matriz="<<GetDimensaoMatriz() ;
   os<<"\nMaior valor="<<GetMaiorValor() ;
   os<<"\nMenor valor="<<GetMenorValor() ;
   os<<"\nMedia="<<Media() ;
   os<<"\nFormato de salvamento="<<formatoSalvamento<<endl ;
}



